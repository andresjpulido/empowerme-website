---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import Seo from "../components/Seo.astro";
import siteData from "../data/siteData.json";
import "../base.css";

Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=300, s-maxage=3600"
);

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="var(--primary-color)" />
    <link rel="icon" href="favicon.ico" />
    <link rel="preload" href="/images/cover-bg.webp" as="image" />
    <link rel="preload" href="/images/quote-bg.png" as="image" />
    <link
      rel="preload"
      href="/fonts/Montserrat-Bold.ttf"
      as="font"
      type="font/ttf"
      crossorigin
    />

    <Seo {siteData} {title} {description} />

    <script
      type="text/javascript"
      async
      src="https://static.klaviyo.com/onsite/js/klaviyo.js?company_id=PUrkeHP"
    ></script>

    <script>
      // @ts-nocheck
      const klaviyoInit = () => {
        if (!(window as any).klaviyo) {
          (window as any)._klOnsite = (window as any)._klOnsite || [];
          try {
              (window as any).klaviyo = new Proxy(
              {},
              {
                get: function (n, i) {
                  return "push" === i
                    ? function () {
                        var n;
                        (n = (window as any)._klOnsite).push.apply(n, arguments);
                      }
                    : function () {
                        for (
                          var n = arguments.length, o = new Array(n), w = 0;
                          w < n;
                          w++
                        )
                          o[w] = arguments[w];
                        var t =
                            "function" == typeof o[o.length - 1]
                              ? o.pop()
                              : void 0,
                          e = new Promise(function (n) {
                              (window as any)._klOnsite.push(
                              [i].concat(o, [
                                 (i:any) => {
                                  t && t(i), n(i);
                                },
                              ])
                            );
                          });
                        return e;
                      };
                },
              }
            );
          } catch (n) {
            ((window as any).klaviyo = (window as any).klaviyo || []),
              ((window as any).klaviyo.push = function () {
                var n;
                (n = (window as any)._klOnsite).push.apply(n, arguments);
              });
          }
        }
        console.log("end script")
      } 
  
      klaviyoInit()
    </script>
    
  </head>

  <body>
    <Header />
    <slot />
    <Footer />
  </body>
</html>
